Error: could not connect to ollama app, is it running?
Waiting for Ollama to start...
2025/02/18 05:09:32 routes.go:1259: INFO server config env="map[CUDA_VISIBLE_DEVICES:0,1 GPU_DEVICE_ORDINAL: HIP_VISIBLE_DEVICES: HSA_OVERRIDE_GFX_VERSION: HTTPS_PROXY: HTTP_PROXY: NO_PROXY: OLLAMA_DEBUG:false OLLAMA_FLASH_ATTENTION:false OLLAMA_GPU_OVERHEAD:0 OLLAMA_HOST:http://127.0.0.1:11434 OLLAMA_INTEL_GPU:false OLLAMA_KEEP_ALIVE:5m0s OLLAMA_KV_CACHE_TYPE: OLLAMA_LLM_LIBRARY: OLLAMA_LOAD_TIMEOUT:5m0s OLLAMA_MAX_LOADED_MODELS:0 OLLAMA_MAX_QUEUE:512 OLLAMA_MODELS:/scratch/gpfs/jx0800/models OLLAMA_MULTIUSER_CACHE:false OLLAMA_NOHISTORY:false OLLAMA_NOPRUNE:false OLLAMA_NUM_PARALLEL:0 OLLAMA_ORIGINS:[http://localhost https://localhost http://localhost:* https://localhost:* http://127.0.0.1 https://127.0.0.1 http://127.0.0.1:* https://127.0.0.1:* http://0.0.0.0 https://0.0.0.0 http://0.0.0.0:* https://0.0.0.0:* app://* file://* tauri://* vscode-webview://*] OLLAMA_SCHED_SPREAD:false ROCR_VISIBLE_DEVICES: http_proxy: https_proxy: no_proxy:]"
time=2025-02-18T05:09:32.162-05:00 level=INFO source=images.go:757 msg="total blobs: 18"
time=2025-02-18T05:09:32.163-05:00 level=INFO source=images.go:764 msg="total unused blobs removed: 0"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] POST   /api/pull                 --> github.com/ollama/ollama/server.(*Server).PullHandler-fm (5 handlers)
[GIN-debug] POST   /api/generate             --> github.com/ollama/ollama/server.(*Server).GenerateHandler-fm (5 handlers)
[GIN-debug] POST   /api/chat                 --> github.com/ollama/ollama/server.(*Server).ChatHandler-fm (5 handlers)
[GIN-debug] POST   /api/embed                --> github.com/ollama/ollama/server.(*Server).EmbedHandler-fm (5 handlers)
[GIN-debug] POST   /api/embeddings           --> github.com/ollama/ollama/server.(*Server).EmbeddingsHandler-fm (5 handlers)
[GIN-debug] POST   /api/create               --> github.com/ollama/ollama/server.(*Server).CreateHandler-fm (5 handlers)
[GIN-debug] POST   /api/push                 --> github.com/ollama/ollama/server.(*Server).PushHandler-fm (5 handlers)
[GIN-debug] POST   /api/copy                 --> github.com/ollama/ollama/server.(*Server).CopyHandler-fm (5 handlers)
[GIN-debug] DELETE /api/delete               --> github.com/ollama/ollama/server.(*Server).DeleteHandler-fm (5 handlers)
[GIN-debug] POST   /api/show                 --> github.com/ollama/ollama/server.(*Server).ShowHandler-fm (5 handlers)
[GIN-debug] POST   /api/blobs/:digest        --> github.com/ollama/ollama/server.(*Server).CreateBlobHandler-fm (5 handlers)
[GIN-debug] HEAD   /api/blobs/:digest        --> github.com/ollama/ollama/server.(*Server).HeadBlobHandler-fm (5 handlers)
[GIN-debug] GET    /api/ps                   --> github.com/ollama/ollama/server.(*Server).PsHandler-fm (5 handlers)
[GIN-debug] POST   /v1/chat/completions      --> github.com/ollama/ollama/server.(*Server).ChatHandler-fm (6 handlers)
[GIN-debug] POST   /v1/completions           --> github.com/ollama/ollama/server.(*Server).GenerateHandler-fm (6 handlers)
[GIN-debug] POST   /v1/embeddings            --> github.com/ollama/ollama/server.(*Server).EmbedHandler-fm (6 handlers)
[GIN-debug] GET    /v1/models                --> github.com/ollama/ollama/server.(*Server).ListHandler-fm (6 handlers)
[GIN-debug] GET    /v1/models/:model         --> github.com/ollama/ollama/server.(*Server).ShowHandler-fm (6 handlers)
[GIN-debug] GET    /                         --> github.com/ollama/ollama/server.(*Server).GenerateRoutes.func1 (5 handlers)
[GIN-debug] GET    /api/tags                 --> github.com/ollama/ollama/server.(*Server).ListHandler-fm (5 handlers)
[GIN-debug] GET    /api/version              --> github.com/ollama/ollama/server.(*Server).GenerateRoutes.func2 (5 handlers)
[GIN-debug] HEAD   /                         --> github.com/ollama/ollama/server.(*Server).GenerateRoutes.func1 (5 handlers)
[GIN-debug] HEAD   /api/tags                 --> github.com/ollama/ollama/server.(*Server).ListHandler-fm (5 handlers)
[GIN-debug] HEAD   /api/version              --> github.com/ollama/ollama/server.(*Server).GenerateRoutes.func2 (5 handlers)
time=2025-02-18T05:09:32.163-05:00 level=INFO source=routes.go:1310 msg="Listening on 127.0.0.1:11434 (version 0.5.4)"
time=2025-02-18T05:09:32.164-05:00 level=INFO source=routes.go:1339 msg="Dynamic LLM libraries" runners="[cpu cpu_avx cpu_avx2 cuda_v11_avx cuda_v12_avx rocm_avx]"
time=2025-02-18T05:09:32.164-05:00 level=INFO source=gpu.go:226 msg="looking for compatible GPUs"
time=2025-02-18T05:09:33.051-05:00 level=INFO source=types.go:131 msg="inference compute" id=GPU-83a2fe0e-5ca2-bfe7-65cd-fdf081753bf8 library=cuda variant=v12 compute=8.0 driver=12.8 name="NVIDIA A100-SXM4-80GB" total="79.3 GiB" available="78.8 GiB"
time=2025-02-18T05:09:33.051-05:00 level=INFO source=types.go:131 msg="inference compute" id=GPU-5aba2d94-db56-7ab9-b90d-0671180cd1f0 library=cuda variant=v12 compute=8.0 driver=12.8 name="NVIDIA A100-SXM4-80GB" total="79.3 GiB" available="78.8 GiB"
[GIN] 2025/02/18 - 05:09:47 | 200 |    3.126465ms |       127.0.0.1 | GET      "/api/tags"
{"models":[{"name":"llama3.3:70b","model":"llama3.3:70b","modified_at":"2025-02-18T04:43:20.886412455-05:00","size":42520413916,"digest":"a6eb4748fd2990ad2952b2335a95a7f952d1a06119a0aa6a2df6cd052a93a3fa","details":{"parent_model":"","format":"gguf","family":"llama","families":["llama"],"parameter_size":"70.6B","quantization_level":"Q4_K_M"}},{"name":"bge-m3:latest","model":"bge-m3:latest","modified_at":"2025-02-08T07:30:43.672702757-05:00","size":1157672605,"digest":"7907646426070047a77226ac3e684fbbe8410524f7b4a74d02837e43f2146bab","details":{"parent_model":"","format":"gguf","family":"bert","families":["bert"],"parameter_size":"566.70M","quantization_level":"F16"}},{"name":"llama3.2:3b","model":"llama3.2:3b","modified_at":"2025-02-07T19:21:18.456976371-05:00","size":2019393189,"digest":"a80c4f17acd55265feec403c7aef86be0c25983ab279d83f3bcd3abbcb5b8b72","details":{"parent_model":"","format":"gguf","family":"llama","families":["llama"],"parameter_size":"3.2B","quantization_level":"Q4_K_M"}},{"name":"nomic-embed-text:latest","model":"nomic-embed-text:latest","modified_at":"2025-02-04T04:00:22.561099784-05:00","size":274302450,"digest":"0a109f422b47e3a30ba2b10eca18548e944e8a23073ee3f3e947efcf3c45e59f","details":{"parent_model":"","format":"gguf","family":"nomic-bert","families":["nomic-bert"],"parameter_size":"137M","quantization_level":"F16"}}]}Ollama is ready. Starting Graphrag...

config_path: /scratch/gpfs/jx0800/data/graphrag/settings.yaml
Logging enabled at /scratch/gpfs/jx0800/data/graphrag/logs/indexing-engine.log
Running standard indexing.
🚀 create_base_text_units
                                                  id  ... n_tokens
0  e72fce0bdeb62991ec38c3b6cf3aa675f8eabcce43a303...  ...      701
1  826236e9b53b61f612c6be568d84689b52b02eaab67617...  ...      849
2  bcfc6a23d78c876f7cc226f911e6ce8375526d89093e88...  ...      926
3  332527ce3f7779776fcfae343ec912a32806bb50e27d75...  ...      819

[4 rows x 4 columns]
🚀 create_final_documents
                                                  id  ...                       
text_unit_ids
0  60fc9c195dd446cea71026da21b6a6a4741d6bba079baa...  ...  
[e72fce0bdeb62991ec38c3b6cf3aa675f8eabcce43a30...
1  9e68811b4cd4f15f8ecc47c135b57630624ac5217352bc...  ...  
[bcfc6a23d78c876f7cc226f911e6ce8375526d89093e8...
2  deffe383fea4e5e43d969b23593899dfe4ee8f4533fc02...  ...  
[332527ce3f7779776fcfae343ec912a32806bb50e27d7...
3  88eb9b650c09283b91b10a3bc047224790471845d07fff...  ...  
[826236e9b53b61f612c6be568d84689b52b02eaab6761...

[4 rows x 5 columns]
time=2025-02-18T05:09:58.800-05:00 level=INFO source=sched.go:714 msg="new model will fit in available VRAM in single GPU, loading" model=/scratch/gpfs/jx0800/models/blobs/sha256-4824460d29f2058aaf6e1118a63a7a197a09bed509f0e7d4e2efb1ee273b447d gpu=GPU-83a2fe0e-5ca2-bfe7-65cd-fdf081753bf8 parallel=4 available=84651016192 required="43.6 GiB"
time=2025-02-18T05:09:59.347-05:00 level=INFO source=server.go:104 msg="system memory" total="1007.0 GiB" free="988.5 GiB" free_swap="2.0 GiB"
time=2025-02-18T05:09:59.349-05:00 level=INFO source=memory.go:356 msg="offload to cuda" layers.requested=-1 layers.model=81 layers.offload=81 layers.split="" memory.available="[78.8 GiB]" memory.gpu_overhead="0 B" memory.required.full="43.6 GiB" memory.required.partial="43.6 GiB" memory.required.kv="2.5 GiB" memory.required.allocations="[43.6 GiB]" memory.weights.total="40.7 GiB" memory.weights.repeating="39.9 GiB" memory.weights.nonrepeating="822.0 MiB" memory.graph.full="1.1 GiB" memory.graph.partial="1.1 GiB"
time=2025-02-18T05:09:59.369-05:00 level=INFO source=server.go:376 msg="starting llama server" cmd="/home/jx0800/.local/lib/ollama/runners/cuda_v12_avx/ollama_llama_server runner --model /scratch/gpfs/jx0800/models/blobs/sha256-4824460d29f2058aaf6e1118a63a7a197a09bed509f0e7d4e2efb1ee273b447d --ctx-size 8192 --batch-size 512 --n-gpu-layers 81 --threads 48 --parallel 4 --port 36759"
time=2025-02-18T05:09:59.370-05:00 level=INFO source=sched.go:449 msg="loaded runners" count=1
time=2025-02-18T05:09:59.370-05:00 level=INFO source=server.go:555 msg="waiting for llama runner to start responding"
time=2025-02-18T05:09:59.387-05:00 level=INFO source=server.go:589 msg="waiting for server to become available" status="llm server error"
time=2025-02-18T05:09:59.455-05:00 level=INFO source=runner.go:945 msg="starting go runner"
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: NVIDIA A100-SXM4-80GB, compute capability 8.0, VMM: yes
time=2025-02-18T05:09:59.505-05:00 level=INFO source=runner.go:946 msg=system info="CUDA : ARCHS = 600,610,620,700,720,750,800,860,870,890,900 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | cgo(gcc)" threads=48
time=2025-02-18T05:09:59.505-05:00 level=INFO source=.:0 msg="Server listening on 127.0.0.1:36759"
time=2025-02-18T05:09:59.650-05:00 level=INFO source=server.go:589 msg="waiting for server to become available" status="llm server loading model"
llama_load_model_from_file: using device CUDA0 (NVIDIA A100-SXM4-80GB) - 80729 MiB free
llama_model_loader: loaded meta data with 36 key-value pairs and 724 tensors from /scratch/gpfs/jx0800/models/blobs/sha256-4824460d29f2058aaf6e1118a63a7a197a09bed509f0e7d4e2efb1ee273b447d (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = Llama 3.1 70B Instruct 2024 12
llama_model_loader: - kv   3:                            general.version str              = 2024-12
llama_model_loader: - kv   4:                           general.finetune str              = Instruct
llama_model_loader: - kv   5:                           general.basename str              = Llama-3.1
llama_model_loader: - kv   6:                         general.size_label str              = 70B
llama_model_loader: - kv   7:                            general.license str              = llama3.1
llama_model_loader: - kv   8:                   general.base_model.count u32              = 1
llama_model_loader: - kv   9:                  general.base_model.0.name str              = Llama 3.1 70B
llama_model_loader: - kv  10:          general.base_model.0.organization str              = Meta Llama
llama_model_loader: - kv  11:              general.base_model.0.repo_url str              = https://huggingface.co/meta-llama/Lla...
llama_model_loader: - kv  12:                               general.tags arr[str,5]       = ["facebook", "meta", "pytorch", "llam...
llama_model_loader: - kv  13:                          general.languages arr[str,7]       = ["fr", "it", "pt", "hi", "es", "th", ...
llama_model_loader: - kv  14:                          llama.block_count u32              = 80
llama_model_loader: - kv  15:                       llama.context_length u32              = 131072
llama_model_loader: - kv  16:                     llama.embedding_length u32              = 8192
llama_model_loader: - kv  17:                  llama.feed_forward_length u32              = 28672
llama_model_loader: - kv  18:                 llama.attention.head_count u32              = 64
llama_model_loader: - kv  19:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv  20:                       llama.rope.freq_base f32              = 500000.000000
llama_model_loader: - kv  21:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  22:                 llama.attention.key_length u32              = 128
llama_model_loader: - kv  23:               llama.attention.value_length u32              = 128
llama_model_loader: - kv  24:                          general.file_type u32              = 15
llama_model_loader: - kv  25:                           llama.vocab_size u32              = 128256
llama_model_loader: - kv  26:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv  27:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  28:                         tokenizer.ggml.pre str              = llama-bpe
llama_model_loader: - kv  29:                      tokenizer.ggml.tokens arr[str,128256]  = ["!", "\"", "#", "$", "%", "&", "'", ...
llama_model_loader: - kv  30:                  tokenizer.ggml.token_type arr[i32,128256]  = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  31:                      tokenizer.ggml.merges arr[str,280147]  = ["Ġ Ġ", "Ġ ĠĠĠ", "ĠĠ ĠĠ", "...
llama_model_loader: - kv  32:                tokenizer.ggml.bos_token_id u32              = 128000
llama_model_loader: - kv  33:                tokenizer.ggml.eos_token_id u32              = 128009
llama_model_loader: - kv  34:                    tokenizer.chat_template str              = {{- bos_token }}\n{%- if custom_tools ...
llama_model_loader: - kv  35:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  162 tensors
llama_model_loader: - type q4_K:  441 tensors
llama_model_loader: - type q5_K:   40 tensors
llama_model_loader: - type q6_K:   81 tensors
llm_load_vocab: special tokens cache size = 256
llm_load_vocab: token to piece cache size = 0.7999 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 128256
llm_load_print_meta: n_merges         = 280147
llm_load_print_meta: vocab_only       = 0
llm_load_print_meta: n_ctx_train      = 131072
llm_load_print_meta: n_embd           = 8192
llm_load_print_meta: n_layer          = 80
llm_load_print_meta: n_head           = 64
llm_load_print_meta: n_head_kv        = 8
llm_load_print_meta: n_rot            = 128
llm_load_print_meta: n_swa            = 0
llm_load_print_meta: n_embd_head_k    = 128
llm_load_print_meta: n_embd_head_v    = 128
llm_load_print_meta: n_gqa            = 8
llm_load_print_meta: n_embd_k_gqa     = 1024
llm_load_print_meta: n_embd_v_gqa     = 1024
llm_load_print_meta: f_norm_eps       = 0.0e+00
llm_load_print_meta: f_norm_rms_eps   = 1.0e-05
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 28672
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 0
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 500000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 131072
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: ssm_dt_b_c_rms   = 0
llm_load_print_meta: model type       = 70B
llm_load_print_meta: model ftype      = Q4_K - Medium
llm_load_print_meta: model params     = 70.55 B
llm_load_print_meta: model size       = 39.59 GiB (4.82 BPW) 
llm_load_print_meta: general.name     = Llama 3.1 70B Instruct 2024 12
llm_load_print_meta: BOS token        = 128000 '<|begin_of_text|>'
llm_load_print_meta: EOS token        = 128009 '<|eot_id|>'
llm_load_print_meta: EOT token        = 128009 '<|eot_id|>'
llm_load_print_meta: EOM token        = 128008 '<|eom_id|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOG token        = 128008 '<|eom_id|>'
llm_load_print_meta: EOG token        = 128009 '<|eot_id|>'
llm_load_print_meta: max token length = 256
llm_load_tensors: offloading 80 repeating layers to GPU
llm_load_tensors: offloading output layer to GPU
llm_load_tensors: offloaded 81/81 layers to GPU
llm_load_tensors:        CUDA0 model buffer size = 39979.48 MiB
llm_load_tensors:   CPU_Mapped model buffer size =   563.62 MiB
llama_new_context_with_model: n_seq_max     = 4
llama_new_context_with_model: n_ctx         = 8192
llama_new_context_with_model: n_ctx_per_seq = 2048
llama_new_context_with_model: n_batch       = 2048
llama_new_context_with_model: n_ubatch      = 512
llama_new_context_with_model: flash_attn    = 0
llama_new_context_with_model: freq_base     = 500000.0
llama_new_context_with_model: freq_scale    = 1
llama_new_context_with_model: n_ctx_per_seq (2048) < n_ctx_train (131072) -- the full capacity of the model will not be utilized
llama_kv_cache_init:      CUDA0 KV buffer size =  2560.00 MiB
llama_new_context_with_model: KV self size  = 2560.00 MiB, K (f16): 1280.00 MiB, V (f16): 1280.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     2.08 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =  1104.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    32.01 MiB
llama_new_context_with_model: graph nodes  = 2566
llama_new_context_with_model: graph splits = 2
time=2025-02-18T05:12:36.262-05:00 level=INFO source=server.go:594 msg="llama runner started in 156.89 seconds"
time=2025-02-18T05:12:36.283-05:00 level=WARN source=runner.go:129 msg="truncating input prompt" limit=2048 prompt=2585 keep=5 new=2048
time=2025-02-18T05:12:36.289-05:00 level=WARN source=runner.go:129 msg="truncating input prompt" limit=2048 prompt=2662 keep=5 new=2048
time=2025-02-18T05:12:36.293-05:00 level=WARN source=runner.go:129 msg="truncating input prompt" limit=2048 prompt=2437 keep=5 new=2048
time=2025-02-18T05:12:36.307-05:00 level=WARN source=runner.go:129 msg="truncating input prompt" limit=2048 prompt=2555 keep=5 new=2048
[GIN] 2025/02/18 - 05:12:58 | 500 |          3m0s |       127.0.0.1 | POST     "/v1/chat/completions"
[GIN] 2025/02/18 - 05:12:58 | 500 |          3m0s |       127.0.0.1 | POST     "/v1/chat/completions"
[GIN] 2025/02/18 - 05:12:58 | 500 |          3m0s |       127.0.0.1 | POST     "/v1/chat/completions"
[GIN] 2025/02/18 - 05:12:58 | 500 |          3m0s |       127.0.0.1 | POST     "/v1/chat/completions"
time=2025-02-18T05:12:59.689-05:00 level=WARN source=runner.go:129 msg="truncating input prompt" limit=2048 prompt=2555 keep=5 new=2048
time=2025-02-18T05:12:59.892-05:00 level=WARN source=runner.go:129 msg="truncating input prompt" limit=2048 prompt=2437 keep=5 new=2048
time=2025-02-18T05:12:59.941-05:00 level=WARN source=runner.go:129 msg="truncating input prompt" limit=2048 prompt=2662 keep=5 new=2048
time=2025-02-18T05:13:00.173-05:00 level=WARN source=runner.go:129 msg="truncating input prompt" limit=2048 prompt=2585 keep=5 new=2048
[GIN] 2025/02/18 - 05:13:39 | 200 | 39.451954224s |       127.0.0.1 | POST     "/v1/chat/completions"
llama_model_loader: loaded meta data with 36 key-value pairs and 724 tensors from /scratch/gpfs/jx0800/models/blobs/sha256-4824460d29f2058aaf6e1118a63a7a197a09bed509f0e7d4e2efb1ee273b447d (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = Llama 3.1 70B Instruct 2024 12
llama_model_loader: - kv   3:                            general.version str              = 2024-12
llama_model_loader: - kv   4:                           general.finetune str              = Instruct
llama_model_loader: - kv   5:                           general.basename str              = Llama-3.1
llama_model_loader: - kv   6:                         general.size_label str              = 70B
llama_model_loader: - kv   7:                            general.license str              = llama3.1
llama_model_loader: - kv   8:                   general.base_model.count u32              = 1
llama_model_loader: - kv   9:                  general.base_model.0.name str              = Llama 3.1 70B
llama_model_loader: - kv  10:          general.base_model.0.organization str              = Meta Llama
llama_model_loader: - kv  11:              general.base_model.0.repo_url str              = https://huggingface.co/meta-llama/Lla...
llama_model_loader: - kv  12:                               general.tags arr[str,5]       = ["facebook", "meta", "pytorch", "llam...
llama_model_loader: - kv  13:                          general.languages arr[str,7]       = ["fr", "it", "pt", "hi", "es", "th", ...
llama_model_loader: - kv  14:                          llama.block_count u32              = 80
llama_model_loader: - kv  15:                       llama.context_length u32              = 131072
llama_model_loader: - kv  16:                     llama.embedding_length u32              = 8192
llama_model_loader: - kv  17:                  llama.feed_forward_length u32              = 28672
llama_model_loader: - kv  18:                 llama.attention.head_count u32              = 64
llama_model_loader: - kv  19:              llama.attention.head_count_kv u32              = 8
llama_model_loader: - kv  20:                       llama.rope.freq_base f32              = 500000.000000
llama_model_loader: - kv  21:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  22:                 llama.attention.key_length u32              = 128
llama_model_loader: - kv  23:               llama.attention.value_length u32              = 128
llama_model_loader: - kv  24:                          general.file_type u32              = 15
llama_model_loader: - kv  25:                           llama.vocab_size u32              = 128256
llama_model_loader: - kv  26:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv  27:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  28:                         tokenizer.ggml.pre str              = llama-bpe
llama_model_loader: - kv  29:                      tokenizer.ggml.tokens arr[str,128256]  = ["!", "\"", "#", "$", "%", "&", "'", ...
llama_model_loader: - kv  30:                  tokenizer.ggml.token_type arr[i32,128256]  = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  31:                      tokenizer.ggml.merges arr[str,280147]  = ["Ġ Ġ", "Ġ ĠĠĠ", "ĠĠ ĠĠ", "...
llama_model_loader: - kv  32:                tokenizer.ggml.bos_token_id u32              = 128000
llama_model_loader: - kv  33:                tokenizer.ggml.eos_token_id u32              = 128009
llama_model_loader: - kv  34:                    tokenizer.chat_template str              = {{- bos_token }}\n{%- if custom_tools ...
llama_model_loader: - kv  35:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  162 tensors
llama_model_loader: - type q4_K:  441 tensors
llama_model_loader: - type q5_K:   40 tensors
llama_model_loader: - type q6_K:   81 tensors
llm_load_vocab: special tokens cache size = 256
llm_load_vocab: token to piece cache size = 0.7999 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = llama
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 128256
llm_load_print_meta: n_merges         = 280147
llm_load_print_meta: vocab_only       = 1
llm_load_print_meta: model type       = ?B
llm_load_print_meta: model ftype      = all F32
llm_load_print_meta: model params     = 70.55 B
llm_load_print_meta: model size       = 39.59 GiB (4.82 BPW) 
llm_load_print_meta: general.name     = Llama 3.1 70B Instruct 2024 12
llm_load_print_meta: BOS token        = 128000 '<|begin_of_text|>'
llm_load_print_meta: EOS token        = 128009 '<|eot_id|>'
llm_load_print_meta: EOT token        = 128009 '<|eot_id|>'
llm_load_print_meta: EOM token        = 128008 '<|eom_id|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOG token        = 128008 '<|eom_id|>'
llm_load_print_meta: EOG token        = 128009 '<|eot_id|>'
llm_load_print_meta: max token length = 256
llama_model_load: vocab only - skipping tensors
[GIN] 2025/02/18 - 05:13:58 | 200 | 58.524243132s |       127.0.0.1 | POST     "/v1/chat/completions"
[GIN] 2025/02/18 - 05:14:06 | 200 |          1m6s |       127.0.0.1 | POST     "/v1/chat/completions"
[GIN] 2025/02/18 - 05:14:20 | 200 |         1m20s |       127.0.0.1 | POST     "/v1/chat/completions"
[GIN] 2025/02/18 - 05:14:32 | 200 | 52.611265039s |       127.0.0.1 | POST     "/v1/chat/completions"
[GIN] 2025/02/18 - 05:14:54 | 200 | 48.373521592s |       127.0.0.1 | POST     "/v1/chat/completions"
[GIN] 2025/02/18 - 05:14:59 | 200 |          1m1s |       127.0.0.1 | POST     "/v1/chat/completions"
[GIN] 2025/02/18 - 05:15:07 | 200 | 47.050279942s |       127.0.0.1 | POST     "/v1/chat/completions"
configuration: max_retries=10 max_json_retries=3 max_retry_wait=10.0 max_concurrency=25 tokens_per_minute=50000 requests_per_minute=1000 requests_burst_mode=True json_strategy=<JsonStrategy.VALID: 'valid'> azure=False api_key='eyJhbGciOiJIUzI1NiIsImtpZCI6IlV6SXJWd1h0dnprLVRvdzlLZWstc0M1akptWXBvX1VaVkxUZlpnMDRlOFUiLCJ0eXAiOiJKV1QifQ.eyJzdWIiOiJnb29nbGUtb2F1dGgyfDExMjIwNjUyMzA1MjU3MzA4NzcxMSIsInNjb3BlIjoib3BlbmlkIG9mZmxpbmVfYWNjZXNzIiwiaXNzIjoiYXBpX2tleV9pc3N1ZXIiLCJhdWQiOlsiaHR0cHM6Ly9uZWJpdXMtaW5mZXJlbmNlLmV1LmF1dGgwLmNvbS9hcGkvdjIvIl0sImV4cCI6MTg5NTczNDQxMywidXVpZCI6IjNmMGNjOTczLTI2ODEtNDY3Yi04ZjJiLWNhZDFlZmE2MThjMCIsIm5hbWUiOiJ0ZXN0IiwiZXhwaXJlc19hdCI6IjIwMzAtMDEtMjdUMDg6NTM6MzMrMDAwMCJ9.G6SMzeru88oakNW_MmeQIlWy6WviW1TE_vcfeVgUmHw' track_stream_usage=False organization=None timeout=180.0 model='llama3.3:70b' encoding='cl100k_base' chat_parameters={'frequency_penalty': 0.0, 'max_tokens': 20000, 'n': 1, 'presence_penalty': 0.0, 'temperature': 0.6, 'top_p': 0.9} embeddings_parameters={} sleep_on_rate_limit_recommendation=False base_url='http://localhost:11434/v1'
client: <openai.AsyncOpenAI object at 0x14f00cd17dd0>
cache: <graphrag.index.llm.load_llm.GraphRagLLMCache object at 0x14f00978dcd0>
events: <graphrag.index.llm.load_llm.GraphRagLLMEvents object at 0x14f00978cb90>
all_records: {0: 'Here is the output:\n\n* Entity_types: organization, person, geo, event\n* Entities:\n\t+ Organization: \n\t\t- LeNet\n\t\t- AlexNet\n\t\t- VGGNet\n\t\t- ResNet\n\t\t- YOLO (You Only Look Once)\n\t\t- Faster R-CNN\n\t\t- MobileNets\n\t\t- EfficientNets\n\t+ Person:\n\t\t- LeCun\n\t+ Geo: None\n\t+ Event:\n\t\t- Introduction of Convolutional Neural Networks in the 1980s\n* Relationships:\n\t+ LeCun et al. developed LeNet for digit recognition.\n\t+ CNNs are used in various applications, including computer vision, medical imaging, natural language processing, and autonomous vehicles.\n\t+ Challenges and limitations of CNNs include computational intensity, need for large labeled datasets, and difficulty in understanding global context.\n\t+ Future directions for CNNs include developing more efficient architectures, integrating with other neural network types, and expanding into new fields such as genomics and climate science.\n\nNote: The output is based on the provided text and may not be exhaustive. The relationships between entities are inferred from the text and may require additional context to fully understand.Here is the updated output with additional entities and relationships:\n\n\n* Entity_types: organization, person, geo, event\n* Entities:\n\t+ Organization: \n\t\t- LeNet\n\t\t- AlexNet\n\t\t- VGGNet\n\t\t- ResNet\n\t\t- YOLO (You Only Look Once)\n\t\t- Faster R-CNN\n\t\t- MobileNets\n\t\t- EfficientNets\n\t\t- Google\n\t\t- Microsoft\n\t\t- Facebook\n\t\t- NVIDIA\n\t\t- Stanford University\n\t\t- MIT\n\t+ Person:\n\t\t- LeCun\n\t\t- Yann LeCun\n\t\t- Alex Krizhevsky\n\t\t- Geoffrey Hinton\n\t\t- Andrew Ng\n\t\t- Fei-Fei Li\n\t+ Geo: \n\t\t- United States\n\t\t- Canada\n\t\t- Europe\n\t+ Event:\n\t\t- Introduction of Convolutional Neural Networks in the 1980s\n\t\t- ImageNet Large Scale Visual Recognition Challenge (ILSVRC)\n\t\t- Conference on Computer Vision and Pattern Recognition (CVPR)\n\t\t- Neural Information Processing Systems (NIPS) conference\n* Relationships:\n\t+ LeCun et al. developed LeNet for digit recognition.\n\t+ Alex Krizhevsky et al. developed AlexNet, which won the ILSVRC in 2012.\n\t+ YOLO and Faster R-CNN are object detection algorithms used in computer vision applications.\n\t+ Google, Microsoft, and Facebook are companies that use CNNs in their products and services.\n\t+ NVIDIA is a company that produces hardware optimized for deep learning computations, including those used in CNNs.\n\t+ Stanford University and MIT are institutions that have made significant contributions to the development of CNNs.\n\t+ Geoffrey Hinton and Andrew Ng are prominent researchers who have worked on CNNs and deep learning.\n\t+ Fei-Fei Li is a researcher who has worked on computer vision and CNNs, and has led the development of ImageNet.'}
tuple_delimiter
v1: <|>
v2: ##
graph: Graph with 0 nodes and 0 edges
all_records: {0: "Based on the provided text, here are the extracted entities and relationships:\n\n**Entities:**\n\n* **Organization:** None mentioned\n* **Person:** None mentioned\n* **Geo:** None mentioned\n* **Event:** Introduction to Machine Learning (not a specific event, but rather a topic)\n\nHowever, some key concepts can be identified as entities for the purpose of analysis:\n\n* **Machine Learning (ML)**\n* **Artificial Intelligence (AI)**\n* **Supervised Learning**\n* **Unsupervised Learning**\n* **Reinforcement Learning**\n* **Healthcare**\n* **Financial Services**\n* **E-commerce**\n* **Natural Language Processing (NLP)**\n* **Autonomous Vehicles**\n\n**Relationships:**\n\n* **Machine Learning** is a subset of **Artificial Intelligence**\n* **Supervised Learning**, **Unsupervised Learning**, and **Reinforcement Learning** are types of **Machine Learning**\n* **Machine Learning** has applications in **Healthcare**, **Financial Services**, **E-commerce**, and other domains\n* **Natural Language Processing** is a task that uses **Machine Learning** algorithms\n* **Autonomous Vehicles** use sophisticated **Machine Learning** models\n\nGiven the nature of the text, which focuses on explaining concepts rather than describing specific events or relationships between organizations and people, the output emphasizes the identification of key concepts within the domain of machine learning and their interrelations. \n\nTo format this into a more structured output as requested:\n\n* **Entities:**\n  + Organization: None\n  + Person: None\n  + Geo: None\n  + Event: Introduction to Machine Learning\n  + Concepts: \n    - Machine Learning (ML)\n    - Artificial Intelligence (AI)\n    - Supervised Learning\n    - Unsupervised Learning\n    - Reinforcement Learning\n    - Healthcare\n    - Financial Services\n    - E-commerce\n    - Natural Language Processing (NLP)\n    - Autonomous Vehicles\n\n* **Relationships:**\n  + ML is a subset of AI\n  + Supervised, Unsupervised, and Reinforcement Learning are types of ML\n  + ML applies to Healthcare, Financial Services, E-commerce, etc.\n  + NLP uses ML algorithms\n  + Autonomous Vehicles use ML models\n\nThis output captures the essence of the provided text in terms of entities (concepts) and their relationships, focusing on the domain of machine learning.Given the instruction, I will re-analyze the text with a focus on extracting entities and relationships that fit into the categories of **Organization**, **Person**, **Geo**, **Event**, and other relevant concepts as identified in the initial analysis.\n\nHowever, since the original text is not provided for re-analysis, I'll guide you through a general approach to ensure comprehensive extraction:\n\n1. **Re-read the Text:** Carefully go through the text again to identify any mentions of organizations, people, locations (geo), specific events, and key concepts related to machine learning or other domains.\n\n2. **Identify Entities:**\n   - **Organization:** Look for names of companies, institutions, or groups.\n   - **Person:** Identify names of individuals mentioned in the text.\n   - **Geo:** Find references to cities, countries, states, or any geographical locations.\n   - **Event:** Determine if there are mentions of specific events, conferences, meetings, etc.\n   - **Concepts:** As before, note key concepts like technologies, methodologies, and applications within machine learning and other fields.\n\n3. **Determine Relationships:**\n   - Once entities are identified, look for how they interact or relate to each other. This could be through partnerships, locations, involvement in events, or application of technologies.\n\nGiven the lack of specific text to analyze, here's a hypothetical addition based on common entities and relationships that might have been missed:\n\n* **Entities:**\n  + Organization: \n    - Google\n    - Microsoft\n    - Stanford University\n  + Person: \n    - Andrew Ng\n    - Fei-Fei Li\n  + Geo: \n    - Silicon Valley\n    - New York City\n  + Event: \n    - NeurIPS Conference\n    - International Joint Conference on Artificial Intelligence (IJCAI)\n  + Concepts: \n    - Deep Learning\n    - Computer Vision\n    - Robotics\n\n* **Relationships:**\n  + Google applies **Deep Learning** in its products.\n  + Andrew Ng is associated with **Stanford University** and **Google**.\n  + **Microsoft** invests in **Artificial Intelligence** research.\n  + The **NeurIPS Conference** is held annually in different locations, including **Vancouver** and **Montreal**.\n  + **Fei-Fei Li** works on **Computer Vision** projects at **Stanford University**.\n\nThis example illustrates how additional entities and relationships might be extracted and formatted. For accurate extraction, the actual text content is crucial."}
tuple_delimiter
v1: <|>
v2: ##
graph: Graph with 0 nodes and 0 edges
all_records: {0: 'Here is the output:\n\n("entity_types": ["organization", "person", "geo", "event"])\n("entities": [\n    ("Vaswani", "person"),\n    ("Transformer Neural Networks", "organization"),\n    ("NLP", "organization"),\n    ("RNNs", "organization"),\n    ("CNNs", "organization"),\n    ("BERT", "organization"),\n    ("GPT", "organization"),\n    ("T5", "organization"),\n    ("Vision Transformer", "organization"),\n    ("ViT", "organization"),\n    ("Reformer", "organization"),\n    ("Linformer", "organization"),\n    ("Longformer", "organization")\n])\n("relations": [\n    ("Vaswani", "introduced", "Transformer Neural Networks"),\n    ("Transformer Neural Networks", "used in", "NLP"),\n    ("RNNs", "compared to", "Transformer Neural Networks"),\n    ("CNNs", "compared to", "Transformer Neural Networks"),\n    ("BERT", "uses", "Transformer Neural Networks"),\n    ("GPT", "uses", "Transformer Neural Networks"),\n    ("T5", "uses", "Transformer Neural Networks"),\n    ("Vision Transformer", "uses", "Transformer Neural Networks"),\n    ("ViT", "uses", "Transformer Neural Networks"),\n    ("Reformer", "improves", "Transformer Neural Networks"),\n    ("Linformer", "improves", "Transformer Neural Networks"),\n    ("Longformer", "improves", "Transformer Neural Networks")\n])\n("events": [\n    ("Introduction of Transformer Neural Networks", "event"),\n    ("Development of BERT", "event"),\n    ("Development of GPT", "event"),\n    ("Development of T5", "event"),\n    ("Application of Transformers in Computer Vision", "event"),\n    ("Research on Efficient Transformers", "event")\n])\n("geo": []) \n\nNote: The output is in a JSON-like format, with entities, relations, and events extracted from the text. The "geo" field is empty since there are no geographic locations mentioned in the text.Here is the updated output with additional entities and relationships:\n\n\n("entity_types": ["organization", "person", "geo", "event"])\n("entities": [\n    ("Vaswani", "person"),\n    ("Transformer Neural Networks", "organization"),\n    ("NLP", "organization"),\n    ("RNNs", "organization"),\n    ("CNNs", "organization"),\n    ("BERT", "organization"),\n    ("GPT", "organization"),\n    ("T5", "organization"),\n    ("Vision Transformer", "organization"),\n    ("ViT", "organization"),\n    ("Reformer", "organization"),\n    ("Linformer", "organization"),\n    ("Longformer", "organization"),\n    ("Ashish Vaswani", "person"),\n    ("Noam Shazeer", "person"),\n    ("Niki Parmar", "person"),\n    ("Jakob Uszkoreit", "person"),\n    ("Llion Jones", "person"),\n    ("Aidan N. Gomez", "person"),\n    ("Lukasz Kaiser", "person"),\n    ("Illia Polosukhin", "person"),\n    ("Google", "organization"),\n    ("Stanford University", "organization"),\n    ("University of California, Berkeley", "organization"),\n    ("MIT", "organization"),\n    ("Harvard University", "organization")\n])\n("relations": [\n    ("Vaswani", "introduced", "Transformer Neural Networks"),\n    ("Transformer Neural Networks", "used in", "NLP"),\n    ("RNNs", "compared to", "Transformer Neural Networks"),\n    ("CNNs", "compared to", "Transformer Neural Networks"),\n    ("BERT", "uses", "Transformer Neural Networks"),\n    ("GPT", "uses", "Transformer Neural Networks"),\n    ("T5", "uses", "Transformer Neural Networks"),\n    ("Vision Transformer", "uses", "Transformer Neural Networks"),\n    ("ViT", "uses", "Transformer Neural Networks"),\n    ("Reformer", "improves", "Transformer Neural Networks"),\n    ("Linformer", "improves", "Transformer Neural Networks"),\n    ("Longformer", "improves", "Transformer Neural Networks"),\n    ("Ashish Vaswani", "co-authored with", "Noam Shazeer"),\n    ("Niki Parmar", "collaborated with", "Jakob Uszkoreit"),\n    ("Llion Jones", "worked at", "Google"),\n    ("Aidan N. Gomez", "studied at", "Stanford University"),\n    ("Lukasz Kaiser", "researched at", "University of California, Berkeley"),\n    ("Illia Polosukhin", "published paper with", "Ashish Vaswani")\n])\n("events": [\n    ("Introduction of Transformer Neural Networks", "event"),\n    ("Development of BERT", "event"),\n    ("Development of GPT", "event"),\n    ("Development of T5", "event"),\n    ("Application of Transformers in Computer Vision", "event"),\n    ("Research on Efficient Transformers", "event"),\n    ("Publication of Transformer Paper", "event"),\n    ("Transformer Conference", "event")\n])\n("geo": [\n    ("California", "geo"),\n    ("Massachusetts", "geo")\n])'}
tuple_delimiter
v1: <|>
v2: ##
graph: Graph with 0 nodes and 0 edges
all_records: {0: 'Here is the output:\n\n("Introduction to Graph Neural Networks", "event")\n("Graph Neural Networks", "organization")\n("GNNs", "organization")\n("machine learning algorithms", "organization")\n("social networks", "geo")\n("molecular structures", "geo")\n("knowledge graphs", "geo")\n("recommendation systems", "organization")\n("Graph Convolutional Networks", "organization")\n("GCNs", "organization")\n("convolutional neural networks", "organization")\n("CNNs", "organization")\n("Graph Attention Networks", "organization")\n("GATs", "organization")\n("Graph Recurrent Neural Networks", "organization")\n("GRNNs", "organization")\n("recurrent neural network architectures", "organization")\n("social network analysis", "event")\n("chemistry", "geo")\n("drug discovery", "event")\n("material science", "event")\n("transportation", "geo")\n("traffic prediction", "event")\n("route optimization", "event")\n("finance", "geo")\n("fraud detection", "event")\n("risk assessment", "event")\n("biology", "geo")\n("protein structure prediction", "event")\n("interaction modeling", "event")\n\nRelationships:\n- ("Graph Neural Networks", "used for", "social networks")\n- ("Graph Neural Networks", "used for", "molecular structures")\n- ("Graph Neural Networks", "used for", "knowledge graphs")\n- ("Graph Convolutional Networks", "type of", "Graph Neural Networks")\n- ("Graph Attention Networks", "type of", "Graph Neural Networks")\n- ("Graph Recurrent Neural Networks", "type of", "Graph Neural Networks")\n- ("social network analysis", "uses", "Graph Neural Networks")\n- ("chemistry", "uses", "Graph Neural Networks")\n- ("transportation", "uses", "Graph Neural Networks")\n- ("finance", "uses", "Graph Neural Networks")\n- ("biology", "uses", "Graph Neural Networks")\n\nNote: The output is in the format of (entity, type) and (relationship, type), where entity can be a person, organization, geo, or event, and relationship can be a verb or a preposition. The type of each entity and relationship is also specified.\n\nHere are some examples of extracted information:\n\n* Organizations: Graph Neural Networks, Graph Convolutional Networks, Graph Attention Networks, Graph Recurrent Neural Networks\n* Geos: social networks, molecular structures, knowledge graphs, transportation, finance, biology\n* Events: Introduction to Graph Neural Networks, social network analysis, chemistry, drug discovery, material science, traffic prediction, route optimization, fraud detection, risk assessment, protein structure prediction, interaction modeling\n* Relationships:\n\t+ Graph Neural Networks are used for social networks, molecular structures, knowledge graphs\n\t+ Graph Convolutional Networks, Graph Attention Networks, and Graph Recurrent Neural Networks are types of Graph Neural Networks\n\t+ Social network analysis, chemistry, transportation, finance, and biology use Graph Neural NetworksHere is the updated output with additional entities and relationships:\n\n\n("Introduction to Graph Neural Networks", "event")\n("Graph Neural Networks", "organization")\n("GNNs", "organization")\n("machine learning algorithms", "organization")\n("social networks", "geo")\n("molecular structures", "geo")\n("knowledge graphs", "geo")\n("recommendation systems", "organization")\n("Graph Convolutional Networks", "organization")\n("GCNs", "organization")\n("convolutional neural networks", "organization")\n("CNNs", "organization")\n("Graph Attention Networks", "organization")\n("GATs", "organization")\n("Graph Recurrent Neural Networks", "organization")\n("GRNNs", "organization")\n("recurrent neural network architectures", "organization")\n("social network analysis", "event")\n("chemistry", "geo")\n("drug discovery", "event")\n("material science", "event")\n("transportation", "geo")\n("traffic prediction", "event")\n("route optimization", "event")\n("finance", "geo")\n("fraud detection", "event")\n("risk assessment", "event")\n("biology", "geo")\n("protein structure prediction", "event")\n("interaction modeling", "event")\n("node classification", "event")\n("link prediction", "event")\n("graph classification", "event")\n("network embedding", "organization")\n("deep learning", "organization")\n("artificial intelligence", "organization")\n("computer vision", "organization")\n("natural language processing", "organization")\n("neural networks", "organization")\n("node representation learning", "event")\n("edge representation learning", "event")\n("graph representation learning", "event")\n("message passing neural networks", "organization")\n("neural message passing", "organization")\n\n\nRelationships:\n- ("Graph Neural Networks", "used for", "social networks")\n- ("Graph Neural Networks", "used for", "molecular structures")\n- ("Graph Neural Networks", "used for", "knowledge graphs")\n- ("Graph Convolutional Networks", "type of", "Graph Neural Networks")\n- ("Graph Attention Networks", "type of", "Graph Neural Networks")\n- ("Graph Recurrent Neural Networks", "type of", "Graph Neural Networks")\n- ("social network analysis", "uses", "Graph Neural Networks")\n- ("chemistry", "uses", "Graph Neural Networks")\n- ("transportation", "uses", "Graph Neural Networks")\n- ("finance", "uses", "Graph Neural Networks")\n- ("biology", "uses", "Graph Neural Networks")\n- ("node classification", "part of", "Graph Neural Networks")\n- ("link prediction", "part of", "Graph Neural Networks")\n- ("graph classification", "part of", "Graph Neural Networks")\n- ("network embedding", "related to", "Graph Neural Networks")\n- ("deep learning", "field of", "Graph Neural Networks")\n- ("artificial intelligence", "field of", "Graph Neural Networks")\n- ("computer vision", "related to", "convolutional neural networks")\n- ("natural language processing", "related to", "neural networks")\n- ("message passing neural networks", "type of", "Graph Neural Networks")\n- ("neural message passing", "technique used in", "Graph Neural Networks")'}
tuple_delimiter
v1: <|>
v2: ##
graph: Graph with 0 nodes and 0 edges
❌ extract_graph
None
⠋ GraphRAG Indexer 
├── Loading Input (InputFileType.text) - 4 files loaded (0 filtered) ━ 100% … 0…
├── create_base_text_units ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:00 0:00:00
├── create_final_documents ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:00 0:00:00❌ Errors occurred during the pipeline run, see logs for more details.
